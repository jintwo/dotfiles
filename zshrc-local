# -*- mode: sh -*-
# vim: set ft=sh:

fpath=(/usr/local/share/zsh-completions ~/.zsh/completions $fpath)

export PATH=/usr/local/opt/ruby/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/X11/bin

alias emd="emacs --daemon"
alias emdk="emacsclient -e '(kill-emacs)'"
alias em="emacsclient -t"
alias emx="emacsclient -nc"
alias gpa="gp --all"

# docker
export DOCKER_API_VERSION=1.25

alias dk="docker"
alias dc="docker-compose"
alias dm="docker-machine"
alias dip='dk inspect --format "{{ .NetworkSettings.IPAddress }}"'
alias dke="dk exec -it"
alias dkl='dk logs -f --tail=100'

function dkci {
    local args=($(dk ps | grep $1 | grep ${2:-""} | awk '{print $1 " " $2}'))
    local comps="$(echo $args | wc -w)"
    if [[ $comps -ne 2 ]]; then
        echo "ambigous results. try to specify CONTAINER-ID mask"
        return;
    else
        dk commit ${args[@]}
    fi
}

function dcl {
    dk volume rm $(docker volume ls -qf dangling=true)
    dk rm $(docker ps -qa --no-trunc --filter "status=exited")
    dk rmi $(docker images | grep "none" | awk '/ / { print $3 }')
}

# k8s
export PATH="${PATH}:${HOME}/.krew/bin"
alias kc="kubectl"
alias kcl="kc logs -n production -f --tail=100"
alias kcgp="kc get pods -o wide --all-namespaces"
alias kce="kc exec -it -n production"
alias kcdp="kc delete pod"

kcr () {
    local deploy="$1"
    shift

    local patch_str='{"spec": {"template": {"metadata": {"annotations": {"restartTrigger":"'
    patch_str+="$(date)"
    patch_str+='"}}}}}'

    kubectl patch deploy "$deploy" -p "$patch_str" $@
}

# common
export VIRTUAL_ENV_DISABLE_PROMPT='Y'
export EDITOR="vim"

export TERM="xterm-256color"

export MAVEN_OPTS="-Xmx512m -XX:MaxPermSize=128M"

export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LANG=en_US.UTF-8

# devkitpro
# export DEVKITPRO=/opt/devkitpro
# export DEVKITARM=${DEVKITPRO}/devkitARM
# export DEVKITPPC=${DEVKITPRO}/devkitPPC
# export PATH=${DEVKITPRO}/tools/bin:$PATH

# python + virtualenvwrapper
# export PATH="/usr/local/opt/python@3.8/bin:$PATH"
VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3
which virtualenvwrapper.sh 2>&1 > /dev/null && export WORKON_HOME=$HOME/.virtualenvs && source `which virtualenvwrapper.sh`

# langs
export PATH=$PATH:~/.luarocks/bin
export PATH=$PATH:~/Documents/Github/elixir-ls/release
source ~/.ghcup/env
source ~/.cargo/env

# csound
export DYLD_FRAMEWORK_PATH="$DYLD_FRAMEWORK_PATH:/usr/local/opt/csound/Frameworks"

# utils
function recode {
    if [ -z $1 ]; then
        echo "invalid file name\nusage: $0 file-name [cp1251 [utf8]]"
        return;
    fi
    local filename=$1
    local from_encoding=${2:=cp1251}
    local to_encoding=${3:=utf8}
    iconv -f $from_encoding -t $to_encoding $filename | sponge $filename
}

export PATH=$PATH:~/.tools/bin

# private
if [ -f ~/.zshrc-private ]; then
    source ~/.zshrc-private
fi
