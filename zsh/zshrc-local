# -*- mode: sh -*-

# zsh
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=6"

# brew
if [[ $OSTYPE == darwin* ]]; then
    if [ -d "/opt/homebrew" ]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
        alias b="brew"
        alias bod="brew outdated"
        alias bud="brew update"
        alias bug="brew upgrade"
    fi
fi

# emacs stuff
alias med="emacs --daemon"
alias medk="emacsclient -e '(kill-emacs)'"
alias me="emacsclient -ta ''"
alias mex="emacsclient -nca ''"
alias v="TERM=alacritty vim"

# git
alias gpa="gp --all"

# tilde
alias tilde="TERM=xterm-16color ssh jintwo@tilde.club"

# clipr
if [[ $OSTYPE == darwin* ]]; then
    CLIPR_CLI="$HOME/Documents/dev/projects/clipr/target/debug/clipr-cli"
    CLIPR_CONFIG="$HOME/Documents/dev/projects/clipr/config.toml"
    alias c="$CLIPR_CLI -c $CLIPR_CONFIG"
fi

# common
export VIRTUAL_ENV_DISABLE_PROMPT='Y'

if [[ $OSTYPE == darwin* ]]; then
    export EDITOR="${HOMEBREW_PREFIX}/bin/emacsclient -ta ''"
else
    export EDITOR="emacsclient -ta ''"
fi
export MAVEN_OPTS="-Xmx512m -XX:MaxMetaspaceSize=128M"

export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LANG=en_US.UTF-8

# devkitpro
# export DEVKITPRO=/opt/devkitpro
# export DEVKITARM=${DEVKITPRO}/devkitARM
# export DEVKITPPC=${DEVKITPRO}/devkitPPC
# export PATH=${DEVKITPRO}/tools/bin:$PATH

# langs
# rust
[ -f ~/.cargo/env ] && source ~/.cargo/env

# ocaml
[ -f ~/.opam/opam-init/init.zsh ] && source ~/.opam/opam-init/init.zsh

# haskell
[ -f ~/.ghcup/env ] && source ~/.ghcup/env

# wasm
[ -f ~/.wasmedge/env ] && source ~/.wasmedge/env

# c
if [[ $OSTYPE == darwin* ]]; then
    export SDKROOT="`xcrun --show-sdk-path`"
fi

# csound
if [[ $OSTYPE == darwin* ]]; then
    export DYLD_FRAMEWORK_PATH="$DYLD_FRAMEWORK_PATH:/opt/homebrew/opt/csound/Frameworks"
fi

# guile-hoot
if [[ $OSTYPE == darwin* ]]; then
    export GUILE_LOAD_PATH="/opt/homebrew/share/guile/site/3.0"
    export GUILE_LOAD_COMPILED_PATH="/opt/homebrew/lib/guile/3.0/site-ccache"
    export GUILE_SYSTEM_EXTENSIONS_PATH="/opt/homebrew/lib/guile/3.0/extensions"
fi

# utils
function recode {
    if [ -z $1 ]; then
        echo "invalid file name\nusage: $0 file-name [cp1251 [utf8]]"
        return;
    fi
    local in_filename=$1
    if [ -z $2 ]; then
        local out_filename=$1
    else
        local out_filename=$2
    fi
    local from_encoding=${2:=cp1251}
    local to_encoding=${3:=utf8}
    iconv -f $from_encoding -t $to_encoding $in_filename | sponge $out_filename
}

function jsonf {
    if [ -z $1 ]; then
        echo "invalid file name\nusage: $0 file-name"
        return;
    fi
    local in_filename=$1
    if [ -z $2 ]; then
        local out_filename=$1
    else
        local out_filename=$2
    fi
    cat $in_filename | json_pp | sponge $out_filename
}

function xmlf {
    if [ -z $1 ]; then
        echo "invalid file name\nusage: $0 file-name"
        return;
    fi
    local in_filename=$1
    if [ -z $2 ]; then
        local out_filename=$1
    else
        local out_filename=$2
    fi
    cat $in_filename | xmllint --noenc --format --encode utf-8 - | sponge $out_filename
}

export BAT_THEME=ansi
export LESS=-RS

alias l="eza -F -lah"
alias ls="eza -1"
alias cat="bat -n"
eval "$(zoxide init --cmd j zsh)"

# tmux
function create-tmux-session {
    tmuxp load $(ls $HOME/.tmux.*.yaml | awk '{print $1}')
}

function resolve-tmux-window {
    local session=$(tmux list-sessions | grep attached | cut -d":" -f1)
    local window=$(tmux list-windows | grep active | cut -d":" -f1)
    echo "${session}:${window}"
}

function get-tmux-panes {
    local window=$(resolve-tmux-window)
    echo $(tmux list-panes | cut -d":" -f1 | sed "s/^/$window./" | tr "\n" " ")
}

# eat
[ -n "$EAT_SHELL_INTEGRATION_DIR" ] && source "$EAT_SHELL_INTEGRATION_DIR/zsh"

function dired {
    _eat_msg dired $PWD
}

function magit {
    local git_root=$(git rev-parse --show-toplevel)
    if [ $? -eq 0 ]; then
        _eat_msg magit $git_root
    else
        _eat_msg magit $PWD
    fi
}

# linux stuff
export QT_QPA_PLATFORMTHEME=qt6ct

# path
if [ -f ~/.zshrc-path ]; then
    source ~/.zshrc-path
fi

# private
if [ -f ~/.zshrc-private ]; then
    source ~/.zshrc-private
fi
